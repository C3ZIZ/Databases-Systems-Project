-- Function to get the department name
CREATE OR REPLACE FUNCTION get_department_name(p_dept_id IN departments.department_id%TYPE) RETURN VARCHAR2 IS
  v_department_name VARCHAR2(100);
BEGIN
  SELECT department_name INTO v_department_name FROM departments WHERE department_id = p_dept_id;
  RETURN v_department_name;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('No department found for the given ID.');
    RETURN NULL;
END get_department_name;
/
-- Procedure to show employees with salary greater than the average salary in their department
CREATE OR REPLACE PROCEDURE show_employees_above_average IS
BEGIN
  FOR rec IN (SELECT employee_id, first_name, last_name, salary
              FROM employees
              WHERE salary > (SELECT AVG(salary)
                              FROM employees
                              WHERE department_id = employees.department_id)) LOOP
    DBMS_OUTPUT.PUT_LINE('Employee ID: ' || rec.employee_id || ', Name: ' || rec.first_name || ' ' || rec.last_name || ', Salary: ' || rec.salary);
  END LOOP;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error in fetching employees: ' || SQLERRM);
END show_employees_above_average;
/

-- Procedure to update an employee's salary
CREATE OR REPLACE PROCEDURE update_employee_salary(p_emp_id IN employees.employee_id%TYPE, p_increase IN NUMBER) IS
BEGIN
  UPDATE employees
  SET salary = salary * (1 + p_increase)
  WHERE employee_id = p_emp_id;
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('Salary updated for employee ID: ' || p_emp_id);
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error updating salary: ' || SQLERRM);
END update_employee_salary;
/

-- Main program with menu
DECLARE
  v_operation NUMBER;
  v_employee_id employees.employee_id%TYPE;
  v_increase NUMBER;
  v_department_id departments.department_id%TYPE;
  v_department_name VARCHAR2(100);
BEGIN
  -- Display menu options to the user
  DBMS_OUTPUT.PUT_LINE('*** Main Menu ***');
  DBMS_OUTPUT.PUT_LINE('1: Show employees with salary > average salary in department');
  DBMS_OUTPUT.PUT_LINE('2: Update employee salary');
  DBMS_OUTPUT.PUT_LINE('3: Get department name');
  DBMS_OUTPUT.PUT_LINE('Enter operation number:');
  
  -- User input for operation
  v_operation := &operation; -- Placeholder for user input

  -- Execute the chosen operation
  CASE v_operation
    WHEN 1 THEN
      -- Call procedure to show employees
      show_employees_above_average;

    WHEN 2 THEN
      -- Input for employee ID and increase percentage
      DBMS_OUTPUT.PUT_LINE('Enter Employee ID:');
      v_employee_id := &emp_id; -- Placeholder for employee ID input
      DBMS_OUTPUT.PUT_LINE('Enter increase percentage (e.g., 0.1 for 10% increase):');
      v_increase := &increase; -- Placeholder for increase percentage input
      
      -- Call procedure to update employee salary
      update_employee_salary(v_employee_id, v_increase);
      
    WHEN 3 THEN
      -- Input for d
